const Notificacion = require('../models/notificacion.model');

// Obtener todas las notificaciones
exports.obtenerTodas = async (req, res) => {
    try {
        const notificaciones = await Notificacion.find().sort({ fecha: -1 });
        res.json(notificaciones);
    } catch (error) {
        console.error("‚ùå Error al obtener notificaciones:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};

// Obtener notificaciones por ID de usuario
exports.obtenerPorUsuario = async (req, res) => {
    try {
        const { idUsuario } = req.params;
        console.log("üîç Buscando notificaciones para usuario:", idUsuario);
        
        const notificaciones = await Notificacion.find({ idUsuario }).sort({ fecha: -1 });
        console.log("üìã Notificaciones encontradas:", notificaciones.length);
        
        res.json(notificaciones);
    } catch (error) {
        console.error("‚ùå Error al obtener notificaciones por usuario:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};

// Crear nueva notificaci√≥n
exports.crear = async (req, res) => {
    try {
        console.log("üìù Creando notificaci√≥n:", req.body);
        
        const nueva = new Notificacion(req.body);
        await nueva.save();
        
        console.log("‚úÖ Notificaci√≥n creada:", nueva._id);
        res.status(201).json({ message: 'Notificaci√≥n creada correctamente', notificacion: nueva });
    } catch (error) {
        console.error("‚ùå Error al crear notificaci√≥n:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};

// Eliminar notificaci√≥n por ID
exports.eliminar = async (req, res) => {
    try {
        const eliminada = await Notificacion.findByIdAndDelete(req.params.id);
        if (!eliminada) {
            return res.status(404).json({ message: "Notificaci√≥n no encontrada" });
        }
        res.json({ message: "Notificaci√≥n eliminada", notificacion: eliminada });
    } catch (error) {
        console.error("‚ùå Error al eliminar notificaci√≥n:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};

// Marcar notificaci√≥n como le√≠da
exports.marcarComoLeida = async (req, res) => {
    try {
        const { id } = req.params;
        const actualizada = await Notificacion.findByIdAndUpdate(
            id,
            { estado: 'leido' },
            { new: true }
        );
        
        if (!actualizada) {
            return res.status(404).json({ message: "Notificaci√≥n no encontrada" });
        }
        
        res.json({ message: "Notificaci√≥n marcada como le√≠da", notificacion: actualizada });
    } catch (error) {
        console.error("‚ùå Error al marcar notificaci√≥n como le√≠da:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};

// Obtener notificaciones no le√≠das por usuario
exports.obtenerNoLeidas = async (req, res) => {
    try {
        const { idUsuario } = req.params;
        const notificaciones = await Notificacion.find({ 
            idUsuario, 
            estado: { $ne: 'leido' } 
        }).sort({ fecha: -1 });
        
        res.json(notificaciones);
    } catch (error) {
        console.error("‚ùå Error al obtener notificaciones no le√≠das:", error);
        res.status(500).json({ message: "Error del servidor" });
    }
};
